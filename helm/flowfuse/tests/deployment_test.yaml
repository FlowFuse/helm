# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: test deployment object
templates:
  - deployment.yaml
  - configmap.yaml
set:
  forge.domain: "chart-unit-tests.com"
tests:
  - it: should create a deployment
    template: deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment

  - it: should create a deployment with config and wait-for-db init containers
    template: deployment.yaml
    asserts:
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 2

  - it: should create a deployment with config init container
    template: deployment.yaml
    set:
      forge.localPostgresql: false
      postgresql.host: external-postgresql.host
    asserts:
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 1

  - it: should create an init container with two secrets
    template: deployment.yaml
    asserts:
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[0].env
      - lengthEqual:
          path: spec.template.spec.initContainers[0].env
          count: 2
      - equal:
          path: spec.template.spec.initContainers[0].env[0].name
          value: PGPASSWORD
      - equal:
          path: spec.template.spec.initContainers[0].env[1].name
          value: SMTPPASSWORD
      - equal:
          path: spec.template.spec.initContainers[0].env[*].valueFrom.secretKeyRef.name
          value: flowfuse-secrets

  - it: should create a deployment without INGRESS_ANNOTATIONS environmental variable
    template: deployment.yaml
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].env[?(@.name == "INGRESS_ANNOTATIONS")]
    
  - it: should create container with INGRESS_ANNOTATIONS env and value from `ingress.annotations` 
    template: deployment.yaml
    set:
      ingress.annotations:
        customIngressAnnotation: "true"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: INGRESS_ANNOTATIONS
            value: '{"customIngressAnnotation":"true"}'

  - it: should create container with INGRESS_ANNOTATIONS env and value `forge.projectIngressAnnotations`
    template: deployment.yaml
    set:
      ingress.annotations:
        customIngressAnnotation: "false"
      forge.projectIngressAnnotations:
        customProjectAnnotation: "true"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: INGRESS_ANNOTATIONS
            value: '{"customProjectAnnotation":"true"}'
  
  - it: should not use any specific registry for images
    template: deployment.yaml
    set:
      forge.localPostgresql: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "forge")].image
          pattern: ^flowfuse\/.+$
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "config")].image
          pattern: ^ruby\:.+$
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "wait-for-local-db")].image
          pattern: ^postgres\:.+$

  - it: should use global registry for all containers
    template: deployment.yaml
    set:
      forge.registry: "docker.io"
      forge.localPostgresql: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "forge")].image
          pattern: ^docker\.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "config")].image
          pattern: ^docker\.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "wait-for-local-db")].image
          pattern: ^docker\.io\/

  - it: should use custom registries for all containers
    template: deployment.yaml
    set:
      forge.registry: "docker.io"
      forge.initContainers:
        config:
          image:
            registry: "config.io"
        waitForLocalDb:
          image:
            registry: "wait-for-local-db.io"
      forge.localPostgresql: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "forge")].image
          pattern: ^docker\.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "config")].image
          pattern: ^config\.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "wait-for-local-db")].image
          pattern: ^wait-for-local-db\.io\/

  - it: should use custom registry for init containers only
    template: deployment.yaml
    set:
      forge.initContainers:
        config:
          image:
            registry: "config.io"
        waitForLocalDb:
          image:
            registry: "wait-for-local-db.io"
      forge.localPostgresql: true
    asserts:
      - notMatchRegex:
          path: spec.template.spec.containers[?(@.name == "forge")].image
          pattern: ^docker.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "config")].image
          pattern: ^config.io\/
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "wait-for-local-db")].image
          pattern: ^wait-for-local-db.io\/
