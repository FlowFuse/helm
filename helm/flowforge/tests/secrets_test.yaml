suite: test secrets object
templates:
  - secrets.yaml
tests:
  - it: should create a secret object
    set:
      forge.domain: "chart-unit-tests.com"
      forge.email.smtp:
        host: smtp.gmail.com
        password: ut-smtp-password
      postgresql.auth:
        username: ut-db-username
        password: ut-db-password
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
  - it: should create a secret object with smtp password only
    set:
      forge.domain: "chart-unit-tests.com"
      postgresql.auth.existingSecret: "fake-existing-db-secret"
      forge.email.smtp:
        host: smtp.gmail.com
        password: fakePassword
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - isNotNullOrEmpty:
          path: data.smtp-password
      - notExists:
          path: data.password
  - it: should create a secret object with database password only
    set:
      forge.domain: "chart-unit-tests.com"
      postgresql.auth:
        username: ut-db-username
        password: ut-db-password
      forge.email.smtp:
        host: smtp.gmail.com
        existingSecret: "fake-existing-smtp-secret"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - isNotNullOrEmpty:
          path: data.password
      - isNotNullOrEmpty:
          path: data.postgres-password
      - notExists:
          path: data.smtp-password
  - it: should not create the secret if both external ones are used
    set:
      forge.domain: "chart-unit-tests.com"
      postgresql.auth.existingSecret: "fake-existing-db-secret"
      forge.email.smtp:
        host: smtp.gmail.com
        existingSecret: "fake-existing-smtp-secret"
    asserts:
      - hasDocuments:
          count: 0
